<?php

namespace Octava\Bundle\MuiBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use Sonata\AdminBundle\Route\RouteCollection;

/**
 * OfficeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfficeRepository extends EntityRepository
{
    /**
     * Получить офис по-умолчанию
     * @return Office
     */
    public function getDefault()
    {
        return $this->createQueryBuilder('f')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $alias
     * @return null|Office
     */
    public function findOfficeByAlias($alias)
    {
        return $this->findOneBy(['alias' => $alias]);
    }

    public function findForChoices()
    {
        $data = $this->createQueryBuilder('o')
            ->select('o.id', 'o.name')
            ->getQuery()->getResult();
        $result = [];
        foreach ($data as $item) {
            $result[$item['id']] = $item['name'];
        }

        return $result;
    }

    /**
     * @return Office[]
     */
    public function getRoutingOffices()
    {
        /** @var Office[] $offices */
        $offices = $this->createQueryBuilder('o')
            ->select('o')
            ->leftJoin('RoboLocaleBundle:Locale', 'l', Join::LEFT_JOIN, 'l.alias = o.defaultLanguage')
            ->where('l.state = 1')
            ->orderBy('l.position')
            ->getQuery()
            ->getResult();
        $ret = [];
        foreach ($offices as $office) {
            $ret[$office->getDefaultLanguage()] = $office;
        }

        return $ret;
    }

    /**
     * Возвращает список офисов по языку и хосту
     * @param string $lang
     * @param string $host
     * @param null $excludedIds
     * @return Office[]
     */
    public function getOfficesByLocaleHost($lang, $host, $excludedIds = null)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.defaultLanguage = :defaultLanguage')
            ->andWhere('o.host = :host')
            ->setParameter('defaultLanguage', $lang)
            ->setParameter('host', $host);

        if ($excludedIds) {
            $qb->andWhere('o.id <> :id')->setParameter('id', $excludedIds);
        }

        $offices = $qb->getQuery()
            ->getResult();

        return $offices;
    }

    /**
     * @param string $host
     * @param null $excludedIds
     * @return Office[]
     */
    public function getOfficesByHost($host, $excludedIds = null)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.host = :host')
            ->setParameter('host', $host);

        if ($excludedIds) {
            $qb->andWhere('o.id <> :id')->setParameter('id', $excludedIds);
        }

        $offices = $qb->getQuery()->getResult();

        return $offices;
    }

    protected function configureRoutes(RouteCollection $collection)
    {
        $collection->add('clearCache');
    }
}
