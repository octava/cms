<?php

namespace Octava\Bundle\MuiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TranslationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TranslationRepository extends EntityRepository
{
    public function getAllDomains()
    {
        $domainsData = $this->getDomainsQueryBuilder()->getQuery()->getArrayResult();

        $result = [];
        foreach ($domainsData as $domainItem) {
            $result[] = $domainItem['domain'];
        }

        return $result;
    }

    public function getDomainsQueryBuilder()
    {
        return $this->createQueryBuilder('t')
            ->select('t.domain')
            ->orderBy('t.domain')
            ->groupBy('t.domain');
    }

    /**
     * @param array $domains
     * @param bool|false $excludeAdmin
     * @return Translation[]
     */
    public function getTranslationsByDomains(array $domains, $excludeAdmin = false)
    {
        $builder = $this->createQueryBuilder('t');
        $builder
            ->where($builder->expr()->in('t.domain', $domains));

        if ($excludeAdmin) {
            $builder->andWhere('t.source NOT LIKE :excludeAdmin')
                ->setParameter('excludeAdmin', '%admin\.%');
        }
        return $builder->getQuery()->getResult();
    }

    public function findRevision($className, $object, array $locales, array $fields)
    {
        if (!method_exists($object, 'getId')) {
            throw new \InvalidArgumentException('Invalid param object, must content getId() method');
        }
        /** @var \Gedmo\Translatable\Entity\Repository\TranslationRepository $translationRepository */
        $translationRepository = $this->getEntityManager()->getRepository($className);
        $queryBuilder = $translationRepository->createQueryBuilder('t')
            ->select('t')
            ->where('t.foreignKey = :foreignKey')
            ->andWhere('t.objectClass = :objectClass')
            ->andWhere('t.locale IN (:locales)')
            ->andWhere('t.field IN (:fields)')
            ->setParameters(
                [
                    'foreignKey' => $object->getId(),
                    'objectClass' => get_class($object),
                    'locales' => $locales,
                    'fields' => $fields,
                ]
            );
        return $queryBuilder->getQuery()->getArrayResult();
    }

    public function findCompares($className, $object, array $locales, array $fields)
    {
        if (!method_exists($object, 'getId')) {
            throw new \InvalidArgumentException('Invalid param object, must content getId() method');
        }

        /** @var \Gedmo\Translatable\Entity\Repository\TranslationRepository $translationRepository */
        $translationRepository = $this->getEntityManager()->getRepository($className);
        $queryBuilder = $translationRepository->createQueryBuilder('t')
            ->select('t')
            ->where('t.foreignKey = :foreignKey')
            ->andWhere('t.objectClass = :objectClass')
            ->andWhere('t.locale IN (:locales)')
            ->andWhere('t.field IN (:fields)')
            ->setParameters(
                [
                    'foreignKey' => $object->getId(),
                    'objectClass' => get_class($object),
                    'locales' => $locales,
                    'fields' => $fields,
                ]
            );
        return $queryBuilder->getQuery()->getArrayResult();
    }
}
